/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.2.4. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module contranomy
    ( // Inputs
      input  clk // clock
    , input  reset // reset
    , input [31:0] iBusWishbone_DAT_MISO
    , input  iBusWishbone_ACK
    , input  iBusWishbone_ERR
    , input [31:0] dBusWishbone_DAT_MISO
    , input  dBusWishbone_ACK
    , input  dBusWishbone_ERR
    , input  timerInterrupt
    , input  softwareInterrupt
    , input [31:0] externalInterrupt

      // Outputs
    , output wire [29:0] iBusWishbone_ADR
    , output wire [31:0] iBusWishbone_DAT_MOSI
    , output wire [3:0] iBusWishbone_SEL
    , output wire  iBusWishbone_CYC
    , output wire  iBusWishbone_STB
    , output wire  iBusWishbone_WE
    , output wire [2:0] iBusWishbone_CTI
    , output wire [1:0] iBusWishbone_BTE
    , output wire [29:0] dBusWishbone_ADR
    , output wire [31:0] dBusWishbone_DAT_MOSI
    , output wire [3:0] dBusWishbone_SEL
    , output wire  dBusWishbone_CYC
    , output wire  dBusWishbone_STB
    , output wire  dBusWishbone_WE
    , output wire [2:0] dBusWishbone_CTI
    , output wire [1:0] dBusWishbone_BTE
    );

  `include "ContranomyCoreDirect.inc"

  wire [63:0] c$case_alt;
  reg [31:0] result;
  wire signed [63:0] wild;
  wire signed [63:0] c$wild_app_arg;
  wire [4:0] rs2;
  reg [31:0] result_0;
  wire signed [63:0] result_1;
  wire signed [63:0] wild_0;
  wire signed [63:0] c$wild_app_arg_0;
  wire [36:0] ds;
  wire [36:0] a1;
  wire  c$app_arg;
  wire [37:0] rw;
  wire signed [63:0] wild_1;
  wire signed [63:0] c$wild_app_arg_1;
  wire [4:0] rs1;
  reg [1:0] core_stage = {1'b0,1'bx};
  reg [29:0] core_pc = 30'b000000000000000000000000000000;
  reg [31:0] core_instruction = 32'b00000000000000000000000000000000;
  reg  core_machineState_mstatus_mie = 1'b0;
  reg  core_machineState_mstatus_mpie = 1'b0;
  wire [1:0] result_2;
  reg  core_machineState_mcause_interrupt = 1'b0;
  reg [3:0] core_machineState_mcause_code = 4'b0000;
  wire [4:0] result_3;
  reg [31:0] core_machineState_mtvec = ContranomyCoreDirect( 30'b000000000000000000000000000000 );
  reg  core_machineState_mie_meie = 1'b0;
  reg  core_machineState_mie_mtie = 1'b0;
  reg  core_machineState_mie_msie = 1'b0;
  wire [2:0] result_4;
  reg [31:0] core_machineState_mscratch = 32'b00000000000000000000000000000000;
  reg [29:0] core_machineState_mepc = 30'b000000000000000000000000000000;
  reg [31:0] core_machineState_mtval = 32'b00000000000000000000000000000000;
  reg [31:0] core_machineState_irqmask = 32'b00000000000000000000000000000000;
  wire [167:0] result_5;
  reg [63:0] core_rvfiOrder = 64'd0;
  wire [295:0] result_6;
  wire [706:0] result_7;
  wire [1002:0] result_8;
  wire [295:0] c$case_alt_0;
  wire [263:0] \b'1 ;
  wire [231:0] \c$b'1_0 ;
  wire [63:0] b2;
  wire [63:0] b1;
  wire [167:0] a1_0;
  wire [231:0] b1_0;
  wire [31:0] a1_1;
  wire [263:0] b1_1;
  wire [31:0] a1_2;
  wire [31:0] g3;
  wire [63:0] g5;
  wire [167:0] g4;
  wire [1:0] g1;
  wire [295:0] \s'1 ;
  wire [510:0] result_9;
  wire [127:0] c$case_alt_1;
  reg [127:0] c$case_alt_2;
  wire [31:0] old;
  wire [31:0] newVal;
  wire [31:0] c$case_alt_3;
  wire [31:0] c$case_alt_4;
  wire [31:0] c$case_alt_5;
  wire [31:0] c$case_alt_6;
  wire [3:0] c$case_alt_7;
  wire [3:0] c$case_alt_8;
  wire [3:0] c$case_alt_9;
  wire [3:0] c$case_alt_10;
  wire [31:0] c$app_arg_0;
  wire [31:0] c$app_arg_1;
  wire [4:0] c$app_arg_2;
  wire [36:0] x;
  wire [29:0] pcN1;
  wire [37:0] registerWrite;
  wire [73:0] dBusM2S;
  wire [37:0] result_10;
  reg [37:0] c$registerWrite_case_alt;
  wire [37:0] c$registerWrite_case_alt_0;
  wire [37:0] c$registerWrite_case_alt_1;
  wire [31:0] a3;
  wire [32:0] ldVal;
  wire [31:0] a3_0;
  wire [32:0] csrOld;
  wire [64:0] a2;
  reg [360:0] result_11;
  wire [360:0] result_12;
  wire [360:0] c$case_alt_11;
  wire [64:0] s1;
  wire [263:0] \c$b'1_1 ;
  wire [231:0] \c$b'1_2 ;
  wire [167:0] a2_0;
  reg [232:0] c$case_scrut;
  wire [64:0] eta2;
  reg [31:0] eta1;
  wire [32:0] eta;
  wire [31:0] c$eta1_case_alt;
  wire [31:0] c$eta1_case_alt_0;
  wire [31:0] c$eta1_case_alt_1;
  wire [64:0] eta1_0;
  wire [32:0] eta_0;
  reg [31:0] newValue;
  wire [31:0] c$newValue_case_alt;
  wire [31:0] c$newValue_case_alt_0;
  wire [31:0] c$newValue_case_alt_1;
  wire [31:0] oldValue;
  wire [64:0] eta1_1;
  wire [32:0] eta_1;
  reg [31:0] newValue_0;
  wire [31:0] c$newValue_case_alt_2;
  wire [31:0] c$newValue_case_alt_3;
  wire [31:0] c$newValue_case_alt_4;
  wire [31:0] oldValue_0;
  wire [64:0] eta1_2;
  wire [32:0] eta_2;
  wire [4:0] b3;
  wire [3:0] b2_0;
  wire  b1_2;
  reg [31:0] newValue_1;
  wire [31:0] c$newValue_case_alt_5;
  wire [31:0] c$newValue_case_alt_6;
  wire [31:0] c$newValue_case_alt_7;
  wire [31:0] c$oldValue_case_alt;
  wire [0:0] c$oldValue_app_arg;
  wire [64:0] eta1_3;
  wire [32:0] eta_3;
  wire [29:0] b1_3;
  reg [31:0] newValue_2;
  wire [31:0] c$newValue_case_alt_8;
  wire [31:0] c$newValue_case_alt_9;
  wire [31:0] c$newValue_case_alt_10;
  wire [31:0] c$oldValue_case_alt_0;
  wire [64:0] eta1_4;
  wire [32:0] eta_4;
  reg [31:0] newValue_3;
  wire [31:0] c$newValue_case_alt_11;
  wire [31:0] c$newValue_case_alt_12;
  wire [31:0] c$newValue_case_alt_13;
  wire [31:0] oldValue_1;
  wire [64:0] eta1_5;
  wire [32:0] eta_5;
  wire [31:0] b1_4;
  reg [31:0] newValue_4;
  wire [31:0] c$newValue_case_alt_14;
  wire [31:0] c$newValue_case_alt_15;
  wire [31:0] c$newValue_case_alt_16;
  wire [31:0] oldValue_2;
  wire [64:0] eta1_6;
  wire [32:0] eta_6;
  wire [1:0] g1_0;
  wire [2:0] b4;
  wire  b3_0;
  wire  b2_1;
  wire  b1_5;
  reg [31:0] newValue_5;
  wire [31:0] c$newValue_case_alt_17;
  wire [31:0] c$newValue_case_alt_18;
  wire [31:0] c$newValue_case_alt_19;
  wire [31:0] oldValue_3;
  wire [31:0] c$oldValue_case_alt_1;
  wire [31:0] c$oldValue_case_alt_2;
  wire [31:0] c$oldValue_case_alt_3;
  wire [64:0] eta2_0;
  reg [31:0] eta1_7;
  wire [32:0] eta_7;
  wire [31:0] c$eta1_case_alt_2;
  wire [31:0] c$eta1_case_alt_3;
  wire [31:0] c$eta1_case_alt_4;
  wire [31:0] oldValue_4;
  wire [31:0] c$oldValue_app_arg_0;
  wire [31:0] c$oldValue_app_arg_1;
  wire [31:0] c$oldValue_app_arg_2;
  wire [64:0] eta1_8;
  reg [31:0] eta_8;
  wire [31:0] c$eta_case_alt;
  wire [31:0] c$eta_case_alt_0;
  wire [31:0] c$eta_case_alt_1;
  wire [64:0] eta1_9;
  wire [32:0] eta_9;
  wire [31:0] g8;
  wire [31:0] g7;
  wire [29:0] g6;
  wire [31:0] g5_0;
  wire [2:0] g4_0;
  wire [31:0] g3_0;
  wire [4:0] g2;
  wire [1:0] b3_1;
  wire  b2_2;
  wire  b1_6;
  reg [31:0] newValue_6;
  wire [31:0] c$newValue_case_alt_20;
  wire [31:0] c$newValue_case_alt_21;
  wire [31:0] c$newValue_case_alt_22;
  wire [31:0] c$newValue_app_arg;
  wire [31:0] x_0;
  wire [31:0] oldValue_5;
  wire [31:0] c$oldValue_case_alt_4;
  wire [31:0] c$oldValue_case_alt_5;
  reg [32:0] result_13;
  wire [1:0] csrType;
  reg [32:0] c$writeValue1_case_alt;
  wire [31:0] writeValue0;
  wire [4:0] uimm;
  wire [2:0] func3;
  wire [63:0] b1_7;
  wire [167:0] a1_3;
  wire [231:0] b1_8;
  wire [31:0] a1_4;
  wire [263:0] b1_9;
  wire [31:0] a1_5;
  wire [31:0] g3_1;
  wire [63:0] g5_1;
  wire [167:0] g4_1;
  wire [29:0] g2_0;
  wire [1:0] g1_1;
  wire [360:0] c$csrUnit35Out;
  wire  trap;
  wire [30:0] a1_6;
  wire [295:0] \s' ;
  wire [102:0] exceptionIn;
  wire [326:0] result_14;
  wire [326:0] c$case_alt_12;
  wire [326:0] c$case_alt_13;
  wire [326:0] c$case_alt_14;
  wire [326:0] c$case_alt_15;
  wire [326:0] c$case_alt_16;
  wire [326:0] c$case_alt_17;
  wire [326:0] c$case_alt_18;
  reg [326:0] c$case_alt_19;
  reg [326:0] c$case_alt_20;
  reg [326:0] c$case_alt_21;
  wire [30:0] eta1_10;
  wire [63:0] g5_2;
  wire [31:0] g3_2;
  wire [29:0] g2_1;
  wire [1:0] g1_2;
  wire [30:0] eta_10;
  wire [326:0] result_15;
  wire [30:0] eta1_11;
  wire [63:0] g5_3;
  wire [31:0] g3_3;
  wire [29:0] g2_2;
  wire [1:0] g1_3;
  reg [29:0] c$eta_case_alt_2;
  wire [31:0] c$b1_app_arg;
  wire [31:0] c$b1_case_alt;
  wire [31:0] c$b1_case_alt_0;
  wire [31:0] c$b1_case_alt_1;
  wire [31:0] c$b1_case_alt_2;
  wire [31:0] c$b1_case_alt_3;
  wire [31:0] addr;
  wire [31:0] c$b1_case_alt_4;
  wire [31:0] addr_0;
  wire [4:0] c$b1_app_arg_0;
  wire [4:0] c$b1_case_alt_5;
  wire [4:0] c$b1_case_alt_6;
  wire [4:0] c$b1_case_alt_7;
  wire [4:0] c$b1_case_alt_8;
  wire [4:0] c$b1_case_alt_9;
  wire [4:0] c$b1_case_alt_10;
  wire [4:0] c$b1_case_alt_11;
  wire [4:0] c$b1_case_alt_12;
  wire [4:0] c$b1_case_alt_13;
  reg [4:0] c$b1_case_alt_14;
  wire  interrupt;
  wire  c$interrupt_case_alt;
  wire  result_16;
  wire  c$interrupt_case_alt_0;
  wire  result_17;
  wire  c$$j_case_alt;
  wire  \$j1 ;
  reg  eCall;
  reg  c$eCall_case_alt;
  reg  breakpoint;
  reg  c$breakpoint_case_alt;
  wire [2:0] func3_0;
  wire [11:0] ds15;
  wire [6:0] v1;
  wire [1:0] align;
  wire [29:0] pcN;
  wire  lsFinished;
  wire [4:0] ds16;
  reg [173:0] result_18;
  wire [173:0] c$case_alt_22;
  wire [32:0] c$app_arg_3;
  wire [32:0] c$case_alt_23;
  wire [32:0] c$app_arg_4;
  wire [32:0] c$case_alt_24;
  wire [32:0] c$case_alt_25;
  reg [31:0] c$app_arg_5;
  reg [31:0] result_19;
  wire [0:0] s;
  wire [31:0] c$case_alt_26;
  wire [15:0] karg;
  reg [31:0] result_20;
  wire [0:0] s_0;
  wire [31:0] c$case_alt_27;
  wire [7:0] karg_0;
  wire [31:0] x_1;
  reg [173:0] result_21;
  wire [173:0] c$case_alt_28;
  wire [32:0] c$app_arg_6;
  wire [32:0] c$case_alt_29;
  reg [31:0] c$app_arg_7;
  wire [31:0] c$case_alt_30;
  reg signed [63:0] shiftAmount;
  reg signed [63:0] c$shiftAmount_case_alt;
  reg signed [63:0] c$shiftAmount_case_alt_0;
  reg [3:0] mask;
  reg [3:0] c$mask_case_alt;
  reg [3:0] c$mask_case_alt_0;
  reg  aligned;
  wire  c$aligned_case_alt;
  wire [1:0] alignment;
  wire [2:0] lsw;
  wire [6:0] v1_0;
  wire  c$lsFinished_case_alt;
  wire [1:0] y;
  reg [31:0] result_22;
  wire [31:0] ds_0;
  wire [31:0] x_2;
  wire [31:0] ds_1;
  wire [31:0] x_3;
  wire [31:0] c$x_app_arg;
  reg [31:0] result_23;
  wire [31:0] c$case_alt_31;
  wire [31:0] c$case_alt_32;
  wire [31:0] c$case_alt_33;
  wire [31:0] c$case_alt_34;
  wire [31:0] c$case_alt_35;
  wire [31:0] c$case_alt_36;
  wire signed [31:0] c$app_arg_8;
  wire signed [31:0] c$app_arg_9;
  wire [31:0] ds_2;
  wire [31:0] x_4;
  wire [31:0] c$$fResizeBitVector_$csignExtendOut;
  reg [11:0] c$$fResizeBitVector_$csignExtendOut_app_arg;
  wire [6:0] v1_1;
  wire [0:0] c$$fResizeBitVector_$csignExtendOut_app_arg_0;
  wire  c$ds14_app_arg;
  wire  ipv;
  wire  c$ds14_case_alt;
  reg  ds13;
  reg [31:0] result_24;
  reg [31:0] result_25;
  reg [31:0] c$case_alt_37;
  wire [0:0] result_26;
  wire  b;
  wire [0:0] result_27;
  wire  b_0;
  wire signed [31:0] c$b_app_arg;
  reg [31:0] aluArg1;
  wire signed [63:0] result_28;
  wire signed [63:0] wild_2;
  wire signed [63:0] c$wild_app_arg_2;
  wire [63:0] x_5;
  reg [31:0] result_29;
  reg [31:0] c$aluArg2_case_alt;
  wire [31:0] c$aluArg2_case_alt_0;
  reg [31:0] result_30;
  wire [0:0] bv;
  wire [31:0] c$aluArg1_case_alt;
  wire [31:0] c$$fResizeBitVector_$csignExtendOut_0;
  reg [11:0] c$$fResizeBitVector_$csignExtendOut_app_arg_1;
  wire [31:0] result_31;
  reg [31:0] aluArg1_0;
  reg [31:0] result_32;
  wire [31:0] c$aluArg2_case_alt_1;
  reg [31:0] result_33;
  wire [0:0] bv_0;
  wire [31:0] c$aluArg1_case_alt_0;
  wire [31:0] c$$fResizeBitVector_$csignExtendOut_1;
  reg [11:0] c$$fResizeBitVector_$csignExtendOut_app_arg_2;
  wire [31:0] rs2Val;
  wire [31:0] rs1Val;
  reg  result_34;
  reg  c$ds13_case_alt;
  reg  c$ds13_case_alt_0;
  reg  c$ds13_case_alt_1;
  reg  c$ds13_case_alt_2;
  reg  c$ds13_case_alt_3;
  wire [2:0] c$ds13_case_scrut;
  reg  result_35;
  wire [6:0] v1_2;
  reg  c$ds13_case_alt_4;
  reg  c$ds13_case_alt_5;
  reg  c$ds13_case_alt_6;
  reg  c$ds13_case_alt_7;
  reg  result_36;
  wire [11:0] ds14;
  wire  c$ds13_case_alt_8;
  reg  c$ds13_case_alt_9;
  wire [2:0] c$ds13_case_scrut_0;
  wire [2:0] func3_1;
  wire [6:0] func7;
  wire [1:0] c$case_alt_38;
  wire [1:0] c$case_alt_39;
  wire [4:0] c$dontApplyInHDLOut;
  wire [4:0] c$dontApplyInHDLOut_app_arg;
  wire [4:0] c$dontApplyInHDLOut_0;
  wire [4:0] c$dontApplyInHDLOut_app_arg_0;
  wire [31:0] w;
  wire [101:0] coreIn;
  wire [4:0] c$bv;
  wire [4:0] c$bv_0;
  wire [4:0] c$bv_1;
  wire [1:0] result_8_selection;
  wire [31:0] c$bv_2;
  wire [31:0] c$bv_3;
  wire [32:0] c$case_alt_1_selection;
  wire [11:0] c$case_alt_2_selection_res;
  wire [31:0] c$bv_4;
  wire [6:0] result_11_selection_res;
  wire [31:0] c$bv_5;
  wire [11:0] c$case_scrut_selection_res;
  wire [31:0] c$bv_6;
  wire [31:0] c$bv_8;
  wire [31:0] c$bv_9;
  wire [32:0] c$case_alt_14_selection;
  wire [32:0] c$case_alt_15_selection;
  wire [31:0] c$eta_case_alt_2_selection;
  wire [32:0] c$b1_case_alt_3_selection;
  wire [32:0] c$b1_case_alt_4_selection;
  wire [31:0] c$bv_10;
  wire [31:0] c$bv_11;
  wire [31:0] c$bv_12;
  wire [31:0] c$bv_13;
  wire [31:0] c$bv_14;
  wire [31:0] c$bv_16;
  wire [31:0] c$bv_17;
  wire [31:0] c$bv_18;
  wire [31:0] c$bv_19;
  wire [19:0] c$bv_20;
  wire [31:0] c$bv_21;
  wire [31:0] c$bv_22;
  wire [31:0] c$bv_23;
  wire [31:0] c$bv_24;
  wire [31:0] c$bv_25;
  wire [31:0] c$bv_26;
  wire [2:0] result_23_selection_res;
  wire [31:0] c$bv_27;
  wire [31:0] c$bv_28;
  wire [31:0] c$bv_29;
  wire [31:0] c$bv_30;
  wire [31:0] c$bv_31;
  wire [31:0] c$bv_32;
  wire [31:0] c$bv_33;
  wire [0:0] c$case_alt_37_selection_res;
  wire [31:0] c$bv_34;
  wire [31:0] c$bv_35;
  wire [31:0] c$bv_36;
  wire [31:0] c$bv_37;
  wire [31:0] c$bv_38;
  wire [31:0] c$bv_39;
  wire [31:0] c$bv_40;
  wire [31:0] c$bv_41;
  wire [31:0] c$bv_42;
  wire [31:0] c$bv_43;
  wire [2:0] c$ds13_case_alt_1_selection_res;
  wire [0:0] c$ds13_case_alt_2_selection;
  wire [0:0] c$ds13_case_alt_3_selection;
  wire [31:0] c$bv_45;
  wire [1:0] c$ds13_case_alt_7_selection_res;
  wire [31:0] c$bv_46;
  wire [31:0] c$bv_47;
  wire [31:0] c$bv_48;
  wire [1:0] c$dontApplyInHDLOut_app_arg_selection;
  wire [31:0] c$bv_49;
  wire [1:0] c$dontApplyInHDLOut_app_arg_0_selection;
  wire [31:0] c$bv_50;
  wire [147:0] _clash_internal;
  wire [73:0] iBusWishbone_0;
  wire [73:0] dBusWishbone_0;

  assign coreIn = {{iBusWishbone_DAT_MISO
                   ,iBusWishbone_ACK
                   ,iBusWishbone_ERR}
                  ,{dBusWishbone_DAT_MISO
                   ,dBusWishbone_ACK
                   ,dBusWishbone_ERR}
                  ,timerInterrupt
                  ,softwareInterrupt
                  ,externalInterrupt};

  assign c$case_alt = {result_0,result};

  // blockRam begin
  reg [31:0] result_RAM [0:32-1];

  reg [1023:0] ram_init;
  integer i;
  initial begin
    ram_init = {32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000};
    for (i=0; i < 32; i = i + 1) begin
      result_RAM[32-1-i] = ram_init[i*32+:32];
    end
  end

  always @(posedge clk) begin : result_blockRam
    if (c$app_arg) begin
      result_RAM[result_1] <= ds[31:0];
    end
    result <= result_RAM[(wild)];
  end
  // blockRam end

  assign wild = $signed(c$wild_app_arg);

  assign c$bv = (rs2);

  assign c$wild_app_arg = $unsigned({{(64-5) {1'b0}},c$bv});

  assign rs2 = result_7[553:549];

  // blockRam begin
  reg [31:0] result_0_RAM [0:32-1];

  reg [1023:0] ram_init_0;
  integer i_0;
  initial begin
    ram_init_0 = {32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000,32'b00000000000000000000000000000000};
    for (i_0=0; i_0 < 32; i_0 = i_0 + 1) begin
      result_0_RAM[32-1-i_0] = ram_init_0[i_0*32+:32];
    end
  end

  always @(posedge clk) begin : result_0_blockRam
    if (c$app_arg) begin
      result_0_RAM[result_1] <= ds[31:0];
    end
    result_0 <= result_0_RAM[(wild_1)];
  end
  // blockRam end

  assign result_1 = wild_0;

  assign wild_0 = $signed(c$wild_app_arg_0);

  assign c$bv_0 = (ds[36:32]);

  assign c$wild_app_arg_0 = $unsigned({{(64-5) {1'b0}},c$bv_0});

  assign ds = rw[37:37] ? a1 : ({37 {1'bx}});

  assign a1 = rw[36:0];

  assign c$app_arg = rw[37:37] ? 1'b1 : 1'b0;

  assign rw = result_7[548:511];

  assign wild_1 = $signed(c$wild_app_arg_1);

  assign c$bv_1 = (rs1);

  assign c$wild_app_arg_1 = $unsigned({{(64-5) {1'b0}},c$bv_1});

  assign rs1 = result_7[558:554];

  // register begin
  always @(posedge clk ) begin : core_stage_register
    if ( reset) begin
      core_stage <= {1'b0,1'bx};
    end else   begin
      core_stage <= result_8[295:294];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_pc_register
    if ( reset) begin
      core_pc <= 30'b000000000000000000000000000000;
    end else   begin
      core_pc <= result_8[293:264];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_instruction_register
    if ( reset) begin
      core_instruction <= 32'b00000000000000000000000000000000;
    end else   begin
      core_instruction <= result_8[263:232];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mstatus_mie_register
    if ( reset) begin
      core_machineState_mstatus_mie <= 1'b0;
    end else   begin
      core_machineState_mstatus_mie <= result_8[231:231];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mstatus_mpie_register
    if ( reset) begin
      core_machineState_mstatus_mpie <= 1'b0;
    end else   begin
      core_machineState_mstatus_mpie <= result_8[230:230];
    end
  end
  // register end

  assign result_2 = {core_machineState_mstatus_mie
                    ,core_machineState_mstatus_mpie};

  // register begin
  always @(posedge clk ) begin : core_machineState_mcause_interrupt_register
    if ( reset) begin
      core_machineState_mcause_interrupt <= 1'b0;
    end else   begin
      core_machineState_mcause_interrupt <= result_8[229:229];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mcause_code_register
    if ( reset) begin
      core_machineState_mcause_code <= 4'b0000;
    end else   begin
      core_machineState_mcause_code <= result_8[228:225];
    end
  end
  // register end

  assign result_3 = {core_machineState_mcause_interrupt
                    ,core_machineState_mcause_code};

  // register begin
  always @(posedge clk ) begin : core_machineState_mtvec_register
    if ( reset) begin
      core_machineState_mtvec <= ContranomyCoreDirect( 30'b000000000000000000000000000000 );
    end else   begin
      core_machineState_mtvec <= result_8[224:193];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mie_meie_register
    if ( reset) begin
      core_machineState_mie_meie <= 1'b0;
    end else   begin
      core_machineState_mie_meie <= result_8[192:192];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mie_mtie_register
    if ( reset) begin
      core_machineState_mie_mtie <= 1'b0;
    end else   begin
      core_machineState_mie_mtie <= result_8[191:191];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mie_msie_register
    if ( reset) begin
      core_machineState_mie_msie <= 1'b0;
    end else   begin
      core_machineState_mie_msie <= result_8[190:190];
    end
  end
  // register end

  assign result_4 = {core_machineState_mie_meie
                    ,core_machineState_mie_mtie
                    ,core_machineState_mie_msie};

  // register begin
  always @(posedge clk ) begin : core_machineState_mscratch_register
    if ( reset) begin
      core_machineState_mscratch <= 32'b00000000000000000000000000000000;
    end else   begin
      core_machineState_mscratch <= result_8[189:158];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mepc_register
    if ( reset) begin
      core_machineState_mepc <= 30'b000000000000000000000000000000;
    end else   begin
      core_machineState_mepc <= result_8[157:128];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_mtval_register
    if ( reset) begin
      core_machineState_mtval <= 32'b00000000000000000000000000000000;
    end else   begin
      core_machineState_mtval <= result_8[127:96];
    end
  end
  // register end

  // register begin
  always @(posedge clk ) begin : core_machineState_irqmask_register
    if ( reset) begin
      core_machineState_irqmask <= 32'b00000000000000000000000000000000;
    end else   begin
      core_machineState_irqmask <= result_8[95:64];
    end
  end
  // register end

  assign result_5 = {result_2
                    ,result_3
                    ,core_machineState_mtvec
                    ,result_4
                    ,core_machineState_mscratch
                    ,core_machineState_mepc
                    ,core_machineState_mtval
                    ,core_machineState_irqmask};

  // register begin
  always @(posedge clk ) begin : core_rvfiOrder_register
    if ( reset) begin
      core_rvfiOrder <= 64'd0;
    end else   begin
      core_rvfiOrder <= result_8[63:0];
    end
  end
  // register end

  assign result_6 = {core_stage
                    ,core_pc
                    ,core_instruction
                    ,result_5
                    ,core_rvfiOrder};

  assign result_7 = result_8[1002:296];

  assign result_8_selection = result_6[295:294];

  assign result_8 = result_8_selection[1:1] ? {{{{{30 {1'bx}}
                                                 ,{32 {1'bx}}
                                                 ,{4 {1'bx}}
                                                 ,1'b0
                                                 ,1'b0
                                                 ,1'b0
                                                 ,3'b000
                                                 ,2'b00}
                                                ,dBusM2S}
                                               ,{c$dontApplyInHDLOut_0
                                                ,c$dontApplyInHDLOut
                                                ,registerWrite}
                                               ,result_9}
                                              ,c$case_alt_0} : {{{{result_6[293:264]
                                                                  ,{32 {1'bx}}
                                                                  ,4'b1111
                                                                  ,1'b1
                                                                  ,1'b1
                                                                  ,1'b0
                                                                  ,3'b000
                                                                  ,2'b00}
                                                                 ,{{30 {1'bx}}
                                                                  ,{32 {1'bx}}
                                                                  ,{4 {1'bx}}
                                                                  ,1'b0
                                                                  ,1'b0
                                                                  ,1'b0
                                                                  ,3'b000
                                                                  ,2'b00}}
                                                                ,{c$dontApplyInHDLOut_0
                                                                 ,c$dontApplyInHDLOut
                                                                 ,{1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}}
                                                                ,{1'b0
                                                                 ,64'd0
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,1'b0
                                                                 ,1'b0
                                                                 ,1'b0
                                                                 ,2'b11
                                                                 ,2'b01
                                                                 ,5'd0
                                                                 ,5'd0
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,5'd0
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,4'b0000
                                                                 ,4'b0000
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,32'b00000000000000000000000000000000
                                                                 ,{32'b00000000000000000000000000000000
                                                                  ,32'b00000000000000000000000000000000
                                                                  ,32'b00000000000000000000000000000000
                                                                  ,32'b00000000000000000000000000000000}}}
                                                               ,{c$case_alt_38
                                                                ,result_6[293:264]
                                                                ,w
                                                                ,result_6[231:64]
                                                                ,result_6[63:0]}};

  assign c$case_alt_0 = lsFinished ? {{1'b0,1'bx}
                                     ,a1_2[29:0]
                                     ,\b'1 [263:232]
                                     ,\b'1 [231:64]
                                     ,\b'1 [63:0]} : \s'1 ;

  assign \b'1  = {a1_1,\c$b'1_0 };

  assign \c$b'1_0  = {a1_0,b2};

  assign b2 = b1 + 64'd1;

  assign b1 = b1_0[63:0];

  assign a1_0 = b1_0[231:64];

  assign b1_0 = b1_1[231:0];

  assign a1_1 = b1_1[263:232];

  assign b1_1 = {g3,{g4,g5}};

  assign a1_2 = {g1,pcN1};

  assign g3 = \s'1 [263:232];

  assign g5 = \s'1 [63:0];

  assign g4 = \s'1 [231:64];

  assign g1 = \s'1 [295:294];

  assign \s'1  = result_11[295:0];

  assign c$bv_2 = result_6[263:232];

  assign c$bv_3 = result_6[263:232];

  assign result_9 = {lsFinished
                    ,result_6[63:0]
                    ,result_6[263:232]
                    ,trap
                    ,1'b0
                    ,1'b0
                    ,2'b11
                    ,2'b01
                    ,(c$bv_2[19 : 15])
                    ,(c$bv_3[24 : 20])
                    ,rs1Val
                    ,rs2Val
                    ,c$app_arg_2
                    ,c$app_arg_1
                    ,{result_6[293:264],2'b00}
                    ,{pcN1,2'b00}
                    ,c$app_arg_0
                    ,c$case_alt_9
                    ,c$case_alt_7
                    ,c$case_alt_5
                    ,c$case_alt_3
                    ,c$case_alt_1};

  assign c$case_alt_1_selection = a2[64:32];

  assign c$case_alt_1 = c$case_alt_1_selection[32:32] ? c$case_alt_2 : {32'b00000000000000000000000000000100
                                                                       ,32'b00000000000000000000000000000000
                                                                       ,32'b00000000000000000000000000000000
                                                                       ,32'b00000000000000000000000000000000};

  assign c$bv_4 = result_6[263:232];

  assign c$case_alt_2_selection_res = c$bv_4[31 : 20];

  always @(*) begin
    case(c$case_alt_2_selection_res)
      12'b001100000001 : c$case_alt_2 = {32'b11111111111111111111111111111111
                                        ,32'b11111111111111111111111111111111
                                        ,old
                                        ,newVal};
      default : c$case_alt_2 = {32'b00000000000000000000000000000100
                               ,32'b00000000000000000000000000000000
                               ,32'b00000000000000000000000000000000
                               ,32'b00000000000000000000000000000000};
    endcase
  end

  assign old = a2[63:32];

  assign newVal = a2[31:0];

  assign c$case_alt_3 = dBusM2S[6:6] ? c$case_alt_4 : 32'b00000000000000000000000000000000;

  assign c$case_alt_4 = dBusM2S[5:5] ? dBusM2S[43:12] : 32'b00000000000000000000000000000000;

  assign c$case_alt_5 = dBusM2S[6:6] ? c$case_alt_6 : 32'b00000000000000000000000000000000;

  assign c$case_alt_6 = dBusM2S[5:5] ? 32'b00000000000000000000000000000000 : coreIn[67:36];

  assign c$case_alt_7 = dBusM2S[6:6] ? c$case_alt_8 : 4'b0000;

  assign c$case_alt_8 = dBusM2S[5:5] ? dBusM2S[11:8] : 4'b0000;

  assign c$case_alt_9 = dBusM2S[6:6] ? c$case_alt_10 : 4'b0000;

  assign c$case_alt_10 = dBusM2S[5:5] ? 4'b0000 : dBusM2S[11:8];

  assign c$app_arg_0 = trap ? 32'b00000000000000000000000000000000 : ({dBusM2S[73:44],2'b00});

  assign c$app_arg_1 = registerWrite[37:37] ? x[31:0] : 32'b00000000000000000000000000000000;

  assign c$app_arg_2 = registerWrite[37:37] ? x[36:32] : 5'd0;

  assign x = registerWrite[36:0];

  assign pcN1 = a1_6[29:0];

  assign registerWrite = trap ? {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : result_10;

  assign dBusM2S = result_18[173:100];

  assign result_10 = ((ds16) == (5'd0)) ? {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$registerWrite_case_alt;

  always @(*) begin
    case(v1_2)
      7'b1100011 : c$registerWrite_case_alt = {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
      7'b0001111 : c$registerWrite_case_alt = {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
      7'b1110011 : c$registerWrite_case_alt = c$registerWrite_case_alt_0;
      7'b0100011 : c$registerWrite_case_alt = {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
      7'b0000011 : c$registerWrite_case_alt = c$registerWrite_case_alt_1;
      default : c$registerWrite_case_alt = {1'b1,{ds16
                                                 ,result_24}};
    endcase
  end

  assign c$registerWrite_case_alt_0 = csrOld[32:32] ? {1'b1,{ds16
                                                            ,a3_0}} : {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$registerWrite_case_alt_1 = ldVal[32:32] ? {1'b1,{ds16
                                                           ,a3}} : {1'b0,37'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign a3 = ldVal[31:0];

  assign ldVal = result_18[99:67];

  assign a3_0 = csrOld[31:0];

  assign csrOld = a2[64:32];

  assign a2 = result_11[360:296];

  assign c$bv_5 = result_6[263:232];

  assign result_11_selection_res = c$bv_5[6 : 0];

  always @(*) begin
    case(result_11_selection_res)
      7'b1110011 : result_11 = result_12;
      default : result_11 = c$csrUnit35Out;
    endcase
  end

  assign result_12 = (func3 != 3'b000) ? c$case_alt_11 : c$csrUnit35Out;

  assign c$case_alt_11 = trap ? c$csrUnit35Out : {s1
                                                 ,{a1_5[31:30]
                                                  ,a1_5[29:0]
                                                  ,\c$b'1_1 [263:232]
                                                  ,\c$b'1_1 [231:64]
                                                  ,\c$b'1_1 [63:0]}};

  assign s1 = c$case_scrut[232:168];

  assign \c$b'1_1  = {a1_4,\c$b'1_2 };

  assign \c$b'1_2  = {a2_0,b1_7};

  assign a2_0 = c$case_scrut[167:0];

  assign c$bv_6 = result_6[263:232];

  assign c$case_scrut_selection_res = c$bv_6[31 : 20];

  always @(*) begin
    case(c$case_scrut_selection_res)
      12'b001100000000 : c$case_scrut = {eta1_9
                                        ,{b3_1,g2,g3_0,g4_0,g5_0,g6,g7,g8}};
      12'b001100000001 : c$case_scrut = {eta1_8,a1_3};
      12'b001101000100 : c$case_scrut = {eta2_0,a1_3};
      12'b001100000100 : c$case_scrut = {eta1_6
                                        ,{g1_0,g2,g3_0,b4,g5_0,g6,g7,g8}};
      12'b001100000101 : c$case_scrut = {eta1_5
                                        ,{g1_0,g2,b1_4,g4_0,g5_0,g6,g7,g8}};
      12'b001101000000 : c$case_scrut = {eta1_4
                                        ,{g1_0,g2,g3_0,g4_0,newValue_3,g6,g7,g8}};
      12'b001101000001 : c$case_scrut = {eta1_3
                                        ,{g1_0,g2,g3_0,g4_0,g5_0,b1_3,g7,g8}};
      12'b001101000010 : c$case_scrut = {eta1_2
                                        ,{g1_0,b3,g3_0,g4_0,g5_0,g6,g7,g8}};
      12'b001101000011 : c$case_scrut = {eta1_1
                                        ,{g1_0,g2,g3_0,g4_0,g5_0,g6,newValue_0,g8}};
      12'b001100110000 : c$case_scrut = {eta1_0
                                        ,{g1_0,g2,g3_0,g4_0,g5_0,g6,g7,newValue}};
      12'b001101100000 : c$case_scrut = {eta2,a1_3};
      default : c$case_scrut = {{{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                                ,{32 {1'bx}}}
                               ,a1_3};
    endcase
  end

  assign eta2 = {eta,eta1};

  always @(*) begin
    casez (csrType)
      2'b01 : eta1 = c$eta1_case_alt_1;
      2'b10 : eta1 = c$eta1_case_alt_0;
      2'b11 : eta1 = c$eta1_case_alt;
      default : eta1 = coreIn[31:0];
    endcase
  end

  assign eta = {1'b1,coreIn[31:0]};

  assign c$eta1_case_alt = result_13[32:32] ? (coreIn[31:0] & c$newValue_app_arg) : coreIn[31:0];

  assign c$eta1_case_alt_0 = result_13[32:32] ? (coreIn[31:0] | x_0) : coreIn[31:0];

  assign c$eta1_case_alt_1 = result_13[32:32] ? x_0 : coreIn[31:0];

  assign eta1_0 = {eta_0,newValue};

  assign eta_0 = {1'b1,oldValue};

  always @(*) begin
    casez (csrType)
      2'b01 : newValue = c$newValue_case_alt_1;
      2'b10 : newValue = c$newValue_case_alt_0;
      2'b11 : newValue = c$newValue_case_alt;
      default : newValue = oldValue;
    endcase
  end

  assign c$newValue_case_alt = result_13[32:32] ? (oldValue & c$newValue_app_arg) : oldValue;

  assign c$newValue_case_alt_0 = result_13[32:32] ? (oldValue | x_0) : oldValue;

  assign c$newValue_case_alt_1 = result_13[32:32] ? x_0 : oldValue;

  assign oldValue = result_6[95:64];

  assign eta1_1 = {eta_1,newValue_0};

  assign eta_1 = {1'b1,oldValue_0};

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_0 = c$newValue_case_alt_4;
      2'b10 : newValue_0 = c$newValue_case_alt_3;
      2'b11 : newValue_0 = c$newValue_case_alt_2;
      default : newValue_0 = oldValue_0;
    endcase
  end

  assign c$newValue_case_alt_2 = result_13[32:32] ? (oldValue_0 & c$newValue_app_arg) : oldValue_0;

  assign c$newValue_case_alt_3 = result_13[32:32] ? (oldValue_0 | x_0) : oldValue_0;

  assign c$newValue_case_alt_4 = result_13[32:32] ? x_0 : oldValue_0;

  assign oldValue_0 = result_6[127:96];

  assign eta1_2 = {eta_2,newValue_1};

  assign eta_2 = {1'b1,c$oldValue_case_alt};

  assign b3 = {b1_2,b2_0};

  assign b2_0 = newValue_1[0+:4];

  assign b1_2 = (newValue_1[(64'sd31)]) == (1'b1);

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_1 = c$newValue_case_alt_7;
      2'b10 : newValue_1 = c$newValue_case_alt_6;
      2'b11 : newValue_1 = c$newValue_case_alt_5;
      default : newValue_1 = c$oldValue_case_alt;
    endcase
  end

  assign c$newValue_case_alt_5 = result_13[32:32] ? (c$oldValue_case_alt & c$newValue_app_arg) : c$oldValue_case_alt;

  assign c$newValue_case_alt_6 = result_13[32:32] ? (c$oldValue_case_alt | x_0) : c$oldValue_case_alt;

  assign c$newValue_case_alt_7 = result_13[32:32] ? x_0 : c$oldValue_case_alt;

  assign c$oldValue_case_alt = {({c$oldValue_app_arg,27'b000000000000000000000000000}),result_6[228:225]};

  assign c$oldValue_app_arg = result_6[229:229] ? 1'b1 : 1'b0;

  assign eta1_3 = {eta_3,newValue_2};

  assign eta_3 = {1'b1,c$oldValue_case_alt_0};

  assign b1_3 = newValue_2[31 : 2];

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_2 = c$newValue_case_alt_10;
      2'b10 : newValue_2 = c$newValue_case_alt_9;
      2'b11 : newValue_2 = c$newValue_case_alt_8;
      default : newValue_2 = c$oldValue_case_alt_0;
    endcase
  end

  assign c$newValue_case_alt_8 = result_13[32:32] ? (c$oldValue_case_alt_0 & c$newValue_app_arg) : c$oldValue_case_alt_0;

  assign c$newValue_case_alt_9 = result_13[32:32] ? (c$oldValue_case_alt_0 | x_0) : c$oldValue_case_alt_0;

  assign c$newValue_case_alt_10 = result_13[32:32] ? x_0 : c$oldValue_case_alt_0;

  assign c$oldValue_case_alt_0 = {result_6[157:128],2'b00};

  assign eta1_4 = {eta_4,newValue_3};

  assign eta_4 = {1'b1,oldValue_1};

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_3 = c$newValue_case_alt_13;
      2'b10 : newValue_3 = c$newValue_case_alt_12;
      2'b11 : newValue_3 = c$newValue_case_alt_11;
      default : newValue_3 = oldValue_1;
    endcase
  end

  assign c$newValue_case_alt_11 = result_13[32:32] ? (oldValue_1 & c$newValue_app_arg) : oldValue_1;

  assign c$newValue_case_alt_12 = result_13[32:32] ? (oldValue_1 | x_0) : oldValue_1;

  assign c$newValue_case_alt_13 = result_13[32:32] ? x_0 : oldValue_1;

  assign oldValue_1 = result_6[189:158];

  assign eta1_5 = {eta_5,newValue_4};

  assign eta_5 = {1'b1,oldValue_2};

  assign b1_4 = newValue_4;

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_4 = c$newValue_case_alt_16;
      2'b10 : newValue_4 = c$newValue_case_alt_15;
      2'b11 : newValue_4 = c$newValue_case_alt_14;
      default : newValue_4 = oldValue_2;
    endcase
  end

  assign c$newValue_case_alt_14 = result_13[32:32] ? (oldValue_2 & c$newValue_app_arg) : oldValue_2;

  assign c$newValue_case_alt_15 = result_13[32:32] ? (oldValue_2 | x_0) : oldValue_2;

  assign c$newValue_case_alt_16 = result_13[32:32] ? x_0 : oldValue_2;

  assign oldValue_2 = result_6[224:193];

  assign eta1_6 = {eta_6,newValue_5};

  assign eta_6 = {1'b1,oldValue_3};

  assign g1_0 = a1_3[167:166];

  assign b4 = {b1_5,b2_1,b3_0};

  assign b3_0 = (newValue_5[(64'sd3)]) == (1'b1);

  assign b2_1 = (newValue_5[(64'sd7)]) == (1'b1);

  assign b1_5 = (newValue_5[(64'sd11)]) == (1'b1);

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_5 = c$newValue_case_alt_19;
      2'b10 : newValue_5 = c$newValue_case_alt_18;
      2'b11 : newValue_5 = c$newValue_case_alt_17;
      default : newValue_5 = oldValue_3;
    endcase
  end

  assign c$newValue_case_alt_17 = result_13[32:32] ? (oldValue_3 & c$newValue_app_arg) : oldValue_3;

  assign c$newValue_case_alt_18 = result_13[32:32] ? (oldValue_3 | x_0) : oldValue_3;

  assign c$newValue_case_alt_19 = result_13[32:32] ? x_0 : oldValue_3;

  assign oldValue_3 = (c$oldValue_case_alt_3 | c$oldValue_case_alt_2) | c$oldValue_case_alt_1;

  assign c$oldValue_case_alt_1 = result_6[190:190] ? 32'b00000000000000000000000000001000 : 32'b00000000000000000000000000000000;

  assign c$oldValue_case_alt_2 = result_6[191:191] ? 32'b00000000000000000000000010000000 : 32'b00000000000000000000000000000000;

  assign c$oldValue_case_alt_3 = result_6[192:192] ? 32'b00000000000000000000100000000000 : 32'b00000000000000000000000000000000;

  assign eta2_0 = {eta_7,eta1_7};

  always @(*) begin
    casez (csrType)
      2'b01 : eta1_7 = c$eta1_case_alt_4;
      2'b10 : eta1_7 = c$eta1_case_alt_3;
      2'b11 : eta1_7 = c$eta1_case_alt_2;
      default : eta1_7 = oldValue_4;
    endcase
  end

  assign eta_7 = {1'b1,oldValue_4};

  assign c$eta1_case_alt_2 = result_13[32:32] ? (oldValue_4 & c$newValue_app_arg) : oldValue_4;

  assign c$eta1_case_alt_3 = result_13[32:32] ? (oldValue_4 | x_0) : oldValue_4;

  assign c$eta1_case_alt_4 = result_13[32:32] ? x_0 : oldValue_4;

  assign oldValue_4 = (c$oldValue_app_arg_2 | c$oldValue_app_arg_1) | c$oldValue_app_arg_0;

  assign c$oldValue_app_arg_0 = coreIn[32:32] ? 32'b00000000000000000000000000001000 : 32'b00000000000000000000000000000000;

  assign c$oldValue_app_arg_1 = coreIn[33:33] ? 32'b00000000000000000000000010000000 : 32'b00000000000000000000000000000000;

  assign c$oldValue_app_arg_2 = (coreIn[31:0] != 32'b00000000000000000000000000000000) ? 32'b00000000000000000000100000000000 : 32'b00000000000000000000000000000000;

  assign eta1_8 = {{1'b1,32'b01000000000000000000000100000000}
                  ,eta_8};

  always @(*) begin
    casez (csrType)
      2'b01 : eta_8 = c$eta_case_alt_1;
      2'b10 : eta_8 = c$eta_case_alt_0;
      2'b11 : eta_8 = c$eta_case_alt;
      default : eta_8 = 32'b01000000000000000000000100000000;
    endcase
  end

  assign c$eta_case_alt = result_13[32:32] ? (32'b01000000000000000000000100000000 & c$newValue_app_arg) : 32'b01000000000000000000000100000000;

  assign c$eta_case_alt_0 = result_13[32:32] ? (32'b01000000000000000000000100000000 | x_0) : 32'b01000000000000000000000100000000;

  assign c$eta_case_alt_1 = result_13[32:32] ? x_0 : 32'b01000000000000000000000100000000;

  assign eta1_9 = {eta_9,newValue_6};

  assign eta_9 = {1'b1,oldValue_5};

  assign g8 = a1_3[31:0];

  assign g7 = a1_3[63:32];

  assign g6 = a1_3[93:64];

  assign g5_0 = a1_3[125:94];

  assign g4_0 = a1_3[128:126];

  assign g3_0 = a1_3[160:129];

  assign g2 = a1_3[165:161];

  assign b3_1 = {b1_6,b2_2};

  assign b2_2 = (newValue_6[(64'sd7)]) == (1'b1);

  assign b1_6 = (newValue_6[(64'sd3)]) == (1'b1);

  always @(*) begin
    casez (csrType)
      2'b01 : newValue_6 = c$newValue_case_alt_22;
      2'b10 : newValue_6 = c$newValue_case_alt_21;
      2'b11 : newValue_6 = c$newValue_case_alt_20;
      default : newValue_6 = oldValue_5;
    endcase
  end

  assign c$newValue_case_alt_20 = result_13[32:32] ? (oldValue_5 & c$newValue_app_arg) : oldValue_5;

  assign c$newValue_case_alt_21 = result_13[32:32] ? (oldValue_5 | x_0) : oldValue_5;

  assign c$newValue_case_alt_22 = result_13[32:32] ? x_0 : oldValue_5;

  assign c$newValue_app_arg = ~ x_0;

  assign x_0 = result_13[31:0];

  assign oldValue_5 = c$oldValue_case_alt_5 | c$oldValue_case_alt_4;

  assign c$oldValue_case_alt_4 = result_6[231:231] ? 32'b00000000000000000000000000001000 : 32'b00000000000000000000000000000000;

  assign c$oldValue_case_alt_5 = result_6[230:230] ? 32'b00000000000000000000000010000000 : 32'b00000000000000000000000000000000;

  always @(*) begin
    casez (csrType)
      2'b01 : result_13 = {1'b1,writeValue0};
      default : result_13 = c$writeValue1_case_alt;
    endcase
  end

  assign csrType = (func3[1 : 0]);

  always @(*) begin
    case(uimm)
      5'b00000 : c$writeValue1_case_alt = {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};
      default : c$writeValue1_case_alt = {1'b1,writeValue0};
    endcase
  end

  assign writeValue0 = ((func3[(64'sd2)]) == (1'b1)) ? ({27'b000000000000000000000000000,uimm}) : rs1Val;

  assign c$bv_8 = result_6[263:232];

  assign uimm = ((c$bv_8[19 : 15]));

  assign c$bv_9 = result_6[263:232];

  assign func3 = c$bv_9[14 : 12];

  assign b1_7 = b1_8[63:0];

  assign a1_3 = b1_8[231:64];

  assign b1_8 = b1_9[231:0];

  assign a1_4 = b1_9[263:232];

  assign b1_9 = {g3_1,{g4_1,g5_1}};

  assign a1_5 = {g1_1,g2_0};

  assign g3_1 = \s' [263:232];

  assign g5_1 = \s' [63:0];

  assign g4_1 = \s' [231:64];

  assign g2_0 = \s' [293:264];

  assign g1_1 = \s' [295:294];

  assign c$csrUnit35Out = {{{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                           ,{32 {1'bx}}}
                          ,\s' };

  assign trap = a1_6[30:30];

  assign a1_6 = result_14[326:296];

  assign \s'  = result_14[295:0];

  assign exceptionIn = {ipv
                       ,y != 2'b00
                       ,c$ds14_case_alt
                       ,result_18[66:34]
                       ,result_18[33:1]
                       ,coreIn[33:33]
                       ,coreIn[32:32]
                       ,coreIn[31:0]};

  assign result_14 = exceptionIn[102:102] ? result_15 : c$case_alt_12;

  assign c$case_alt_12 = exceptionIn[101:101] ? result_15 : c$case_alt_13;

  assign c$case_alt_13 = exceptionIn[100:100] ? result_15 : c$case_alt_14;

  assign c$case_alt_14_selection = exceptionIn[99:67];

  assign c$case_alt_14 = c$case_alt_14_selection[32:32] ? result_15 : c$case_alt_15;

  assign c$case_alt_15_selection = exceptionIn[66:34];

  assign c$case_alt_15 = c$case_alt_15_selection[32:32] ? result_15 : c$case_alt_16;

  assign c$case_alt_16 = breakpoint ? result_15 : c$case_alt_17;

  assign c$case_alt_17 = eCall ? result_15 : c$case_alt_18;

  assign c$case_alt_18 = interrupt ? result_15 : c$case_alt_19;

  always @(*) begin
    case(v1)
      7'b1110011 : c$case_alt_19 = c$case_alt_20;
      default : c$case_alt_19 = {eta_10,result_6};
    endcase
  end

  always @(*) begin
    case(func3_0)
      3'b000 : c$case_alt_20 = c$case_alt_21;
      default : c$case_alt_20 = {eta_10,result_6};
    endcase
  end

  always @(*) begin
    case(ds15)
      12'b001100000010 : c$case_alt_21 = {eta1_10
                                         ,{g1_2
                                          ,g2_1
                                          ,g3_2
                                          ,{{result_6[230:230],result_6[230:230]}
                                           ,result_6[229:225]
                                           ,result_6[224:193]
                                           ,result_6[192:190]
                                           ,result_6[189:158]
                                           ,result_6[157:128]
                                           ,result_6[127:96]
                                           ,result_6[95:64]}
                                          ,g5_2}};
      default : c$case_alt_21 = {eta_10,result_6};
    endcase
  end

  assign eta1_10 = {1'b0,result_6[157:128]};

  assign g5_2 = result_6[63:0];

  assign g3_2 = result_6[263:232];

  assign g2_1 = result_6[293:264];

  assign g1_2 = result_6[295:294];

  assign eta_10 = {1'b0,pcN};

  assign result_15 = {eta1_11
                     ,{g1_3
                      ,g2_2
                      ,g3_3
                      ,{{1'b0,result_6[231:231]}
                       ,c$b1_app_arg_0
                       ,result_6[224:193]
                       ,result_6[192:190]
                       ,result_6[189:158]
                       ,result_6[293:264]
                       ,c$b1_app_arg
                       ,result_6[95:64]}
                      ,g5_3}};

  assign eta1_11 = {1'b1,c$eta_case_alt_2};

  assign g5_3 = result_6[63:0];

  assign g3_3 = result_6[263:232];

  assign g2_2 = result_6[293:264];

  assign g1_3 = result_6[295:294];

  assign c$eta_case_alt_2_selection = result_6[224:193];

  always @(*) begin
    casez (c$eta_case_alt_2_selection)
      32'b??????????????????????????????00 : c$eta_case_alt_2 = result_6[224:195];
      default : c$eta_case_alt_2 = result_6[224:195];
    endcase
  end

  assign c$b1_app_arg = exceptionIn[101:101] ? ({pcN,align}) : c$b1_case_alt;

  assign c$b1_case_alt = exceptionIn[100:100] ? result_6[263:232] : c$b1_case_alt_0;

  assign c$b1_case_alt_0 = exceptionIn[102:102] ? c$b1_case_alt_2 : c$b1_case_alt_1;

  assign c$b1_case_alt_1 = breakpoint ? c$b1_case_alt_2 : c$b1_case_alt_3;

  assign c$b1_case_alt_2 = {result_6[293:264],2'b00};

  assign c$b1_case_alt_3_selection = exceptionIn[66:34];

  assign c$b1_case_alt_3 = c$b1_case_alt_3_selection[32:32] ? addr : c$b1_case_alt_4;

  assign addr = exceptionIn[65:34];

  assign c$b1_case_alt_4_selection = exceptionIn[99:67];

  assign c$b1_case_alt_4 = c$b1_case_alt_4_selection[32:32] ? addr_0 : 32'b00000000000000000000000000000000;

  assign addr_0 = exceptionIn[98:67];

  assign c$b1_app_arg_0 = interrupt ? c$b1_case_alt_5 : c$b1_case_alt_6;

  assign c$b1_case_alt_5 = exceptionIn[32:32] ? c$b1_case_alt_7 : c$b1_case_alt_8;

  assign c$b1_case_alt_6 = exceptionIn[102:102] ? {1'b0
                                                  ,4'b0001} : c$b1_case_alt_10;

  assign c$b1_case_alt_7 = result_6[190:190] ? {1'b1
                                               ,4'b0011} : c$b1_case_alt_8;

  assign c$b1_case_alt_8 = exceptionIn[33:33] ? c$b1_case_alt_9 : {1'b1
                                                                  ,4'b1011};

  assign c$b1_case_alt_9 = result_6[191:191] ? {1'b1
                                               ,4'b0111} : {1'b1,4'b1011};

  assign c$b1_case_alt_10 = exceptionIn[100:100] ? {1'b0
                                                   ,4'b0010} : c$b1_case_alt_11;

  assign c$b1_case_alt_11 = exceptionIn[101:101] ? {1'b0
                                                   ,4'b0000} : c$b1_case_alt_12;

  assign c$b1_case_alt_12 = eCall ? {1'b0
                                    ,4'b1011} : c$b1_case_alt_13;

  assign c$b1_case_alt_13 = breakpoint ? {1'b0
                                         ,4'b0011} : c$b1_case_alt_14;

  always @(*) begin
    case(v1)
      7'b0000011 : c$b1_case_alt_14 = {1'b0
                                      ,4'b0100};
      default : c$b1_case_alt_14 = {1'b0,4'b0110};
    endcase
  end

  assign interrupt = lsFinished ? c$interrupt_case_alt : 1'b0;

  assign c$interrupt_case_alt = result_6[231:231] ? result_16 : 1'b0;

  assign result_16 = exceptionIn[33:33] ? c$interrupt_case_alt_0 : result_17;

  assign c$interrupt_case_alt_0 = result_6[191:191] ? 1'b1 : result_17;

  assign result_17 = exceptionIn[32:32] ? c$$j_case_alt : \$j1 ;

  assign c$$j_case_alt = result_6[190:190] ? 1'b1 : \$j1 ;

  assign \$j1  = ((exceptionIn[31:0] & result_6[95:64]) != 32'b00000000000000000000000000000000) ? result_6[192:192] : 1'b0;

  always @(*) begin
    case(v1)
      7'b1110011 : eCall = c$eCall_case_alt;
      default : eCall = 1'b0;
    endcase
  end

  always @(*) begin
    case(func3_0)
      3'b000 : c$eCall_case_alt = ds15 == 12'b000000000000;
      default : c$eCall_case_alt = 1'b0;
    endcase
  end

  always @(*) begin
    case(v1)
      7'b1110011 : breakpoint = c$breakpoint_case_alt;
      default : breakpoint = 1'b0;
    endcase
  end

  always @(*) begin
    case(func3_0)
      3'b000 : c$breakpoint_case_alt = ds15 == 12'b000000000001;
      default : c$breakpoint_case_alt = 1'b0;
    endcase
  end

  assign c$bv_10 = result_6[263:232];

  assign func3_0 = c$bv_10[14 : 12];

  assign c$bv_11 = result_6[263:232];

  assign ds15 = c$bv_11[31 : 20];

  assign c$bv_12 = result_6[263:232];

  assign v1 = c$bv_12[6 : 0];

  assign align = result_22[1:0];

  assign pcN = result_22[31:2];

  assign lsFinished = result_18[0:0];

  assign c$bv_13 = result_6[263:232];

  assign ds16 = (c$bv_13[11 : 7]);

  always @(*) begin
    case(v1_0)
      7'b0000011 : result_18 = c$case_alt_22;
      default : result_18 = result_21;
    endcase
  end

  assign c$case_alt_22 = c$ds14_app_arg ? result_21 : {{result_24[31 : 2]
                                                       ,{32 {1'bx}}
                                                       ,mask
                                                       ,aligned
                                                       ,aligned
                                                       ,1'b0
                                                       ,3'b000
                                                       ,2'b00}
                                                      ,c$app_arg_4
                                                      ,c$case_alt_23
                                                      ,c$app_arg_3
                                                      ,c$lsFinished_case_alt};

  assign c$app_arg_3 = aligned ? {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {1'b1,result_24};

  assign c$case_alt_23 = coreIn[34:34] ? {1'b1,result_24} : {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$app_arg_4 = aligned ? c$case_alt_24 : {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  assign c$case_alt_24 = coreIn[34:34] ? {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : c$case_alt_25;

  assign c$case_alt_25 = coreIn[35:35] ? {1'b1,c$app_arg_5} : {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  always @(*) begin
    casez (lsw)
      3'b?00 : c$app_arg_5 = result_20;
      3'b?01 : c$app_arg_5 = result_19;
      default : c$app_arg_5 = coreIn[67:36];
    endcase
  end

  always @(*) begin
    casez (s)
      1'b0 : result_19 = c$case_alt_26;
      default : result_19 = {16'b0000000000000000,karg};
    endcase
  end

  assign s = {lsw[2:2]};

  assign c$case_alt_26 = (( karg[16-1] ) == (1'b0)) ? ({16'b0000000000000000,karg}) : ({16'b1111111111111111,karg});

  assign karg = x_1[15 : 0];

  always @(*) begin
    casez (s_0)
      1'b0 : result_20 = c$case_alt_27;
      default : result_20 = {24'b000000000000000000000000,karg_0};
    endcase
  end

  assign s_0 = {lsw[2:2]};

  assign c$case_alt_27 = (( karg_0[8-1] ) == (1'b0)) ? ({24'b000000000000000000000000,karg_0}) : ({24'b111111111111111111111111,karg_0});

  assign karg_0 = x_1[7 : 0];

  assign x_1 = coreIn[67:36] >> shiftAmount;

  always @(*) begin
    case(v1_0)
      7'b0100011 : result_21 = c$case_alt_28;
      default : result_21 = {{{30 {1'bx}}
                             ,{32 {1'bx}}
                             ,{4 {1'bx}}
                             ,1'b0
                             ,1'b0
                             ,1'b0
                             ,3'b000
                             ,2'b00}
                            ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                            ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                            ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                            ,1'b1};
    endcase
  end

  assign c$case_alt_28 = c$ds14_app_arg ? {{{30 {1'bx}}
                                           ,{32 {1'bx}}
                                           ,{4 {1'bx}}
                                           ,1'b0
                                           ,1'b0
                                           ,1'b0
                                           ,3'b000
                                           ,2'b00}
                                          ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                                          ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                                          ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                                          ,1'b1} : {{result_24[31 : 2]
                                                    ,c$app_arg_7
                                                    ,mask
                                                    ,aligned
                                                    ,aligned
                                                    ,aligned
                                                    ,3'b000
                                                    ,2'b00}
                                                   ,{1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
                                                   ,c$case_alt_29
                                                   ,c$app_arg_6
                                                   ,c$lsFinished_case_alt};

  assign c$app_arg_6 = aligned ? {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx} : {1'b1,result_24};

  assign c$case_alt_29 = coreIn[34:34] ? {1'b1,result_24} : {1'b0,32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx};

  always @(*) begin
    casez (lsw)
      3'b?00 : c$app_arg_7 = c$case_alt_30;
      3'b?01 : c$app_arg_7 = c$case_alt_30;
      default : c$app_arg_7 = rs2Val;
    endcase
  end

  assign c$case_alt_30 = rs2Val << shiftAmount;

  always @(*) begin
    casez (lsw)
      3'b?00 : shiftAmount = c$shiftAmount_case_alt_0;
      3'b?01 : shiftAmount = c$shiftAmount_case_alt;
      default : shiftAmount = 64'sd0;
    endcase
  end

  always @(*) begin
    case(alignment)
      2'b10 : c$shiftAmount_case_alt = 64'sd16;
      default : c$shiftAmount_case_alt = 64'sd0;
    endcase
  end

  always @(*) begin
    case(alignment)
      2'b11 : c$shiftAmount_case_alt_0 = 64'sd24;
      2'b10 : c$shiftAmount_case_alt_0 = 64'sd16;
      2'b01 : c$shiftAmount_case_alt_0 = 64'sd8;
      default : c$shiftAmount_case_alt_0 = 64'sd0;
    endcase
  end

  always @(*) begin
    casez (lsw)
      3'b?00 : mask = c$mask_case_alt_0;
      3'b?01 : mask = c$mask_case_alt;
      default : mask = 4'b1111;
    endcase
  end

  always @(*) begin
    case(alignment)
      2'b10 : c$mask_case_alt = 4'b1100;
      default : c$mask_case_alt = 4'b0011;
    endcase
  end

  always @(*) begin
    case(alignment)
      2'b11 : c$mask_case_alt_0 = 4'b1000;
      2'b10 : c$mask_case_alt_0 = 4'b0100;
      2'b01 : c$mask_case_alt_0 = 4'b0010;
      default : c$mask_case_alt_0 = 4'b0001;
    endcase
  end

  always @(*) begin
    casez (lsw)
      3'b?01 : aligned = c$aligned_case_alt;
      3'b010 : aligned = alignment == 2'b00;
      default : aligned = 1'b1;
    endcase
  end

  assign c$aligned_case_alt = ((alignment[(64'sd0)]) == (1'b1)) ? 1'b0 : 1'b1;

  assign alignment = result_24[1 : 0];

  assign c$bv_14 = result_6[263:232];

  assign lsw = (c$bv_14[14 : 12]);

  assign c$bv_16 = result_6[263:232];

  assign v1_0 = c$bv_16[6 : 0];

  assign c$lsFinished_case_alt = coreIn[34:34] ? 1'b1 : coreIn[35:35];

  assign y = result_22[1:0];

  always @(*) begin
    case(v1_1)
      7'b1100011 : result_22 = result_23;
      7'b1101111 : result_22 = {result_6[293:264] + ds_1[31:2]
                               ,ds_1[1:0]};
      7'b1100111 : result_22 = {ds_0[31:2]
                               ,ds_0[1:0] & 2'b10};
      default : result_22 = {result_6[293:264] + 30'b000000000000000000000000000001
                            ,2'b00};
    endcase
  end

  assign ds_0 = x_2;

  assign x_2 = rs1Val + c$$fResizeBitVector_$csignExtendOut;

  assign ds_1 = x_3;

  assign x_3 = c$x_app_arg << (64'sd1);

  assign c$bv_17 = result_6[263:232];

  assign c$bv_18 = result_6[263:232];

  assign c$bv_19 = result_6[263:232];

  assign c$bv_20 = ({({({c$$fResizeBitVector_$csignExtendOut_app_arg_0,(c$bv_17[19 : 12])}),(c$bv_18[20 : 20])}),(c$bv_19[30 : 21])});

  assign c$bv_21 = result_6[263:232];

  assign c$bv_22 = result_6[263:232];

  assign c$bv_23 = result_6[263:232];

  assign c$bv_24 = result_6[263:232];

  assign c$bv_25 = result_6[263:232];

  assign c$bv_26 = result_6[263:232];

  assign c$x_app_arg = (( c$bv_20[20-1] ) == (1'b0)) ? ({12'b000000000000,({({({c$$fResizeBitVector_$csignExtendOut_app_arg_0,(c$bv_21[19 : 12])}),(c$bv_22[20 : 20])}),(c$bv_23[30 : 21])})}) : ({12'b111111111111,({({({c$$fResizeBitVector_$csignExtendOut_app_arg_0,(c$bv_24[19 : 12])}),(c$bv_25[20 : 20])}),(c$bv_26[30 : 21])})});

  assign c$bv_27 = result_6[263:232];

  assign result_23_selection_res = (c$bv_27[14 : 12]);

  always @(*) begin
    casez (result_23_selection_res)
      3'b000 : result_23 = c$case_alt_36;
      3'b001 : result_23 = c$case_alt_35;
      3'b100 : result_23 = c$case_alt_34;
      3'b101 : result_23 = c$case_alt_33;
      3'b110 : result_23 = c$case_alt_32;
      3'b111 : result_23 = c$case_alt_31;
      default : result_23 = {result_6[293:264] + 30'b000000000000000000000000000001
                            ,2'b00};
    endcase
  end

  assign c$case_alt_31 = (rs1Val >= rs2Val) ? {result_6[293:264] + ds_2[31:2]
                                              ,ds_2[1:0]} : {result_6[293:264] + 30'b000000000000000000000000000001
                                                            ,2'b00};

  assign c$case_alt_32 = (rs1Val < rs2Val) ? {result_6[293:264] + ds_2[31:2]
                                             ,ds_2[1:0]} : {result_6[293:264] + 30'b000000000000000000000000000001
                                                           ,2'b00};

  assign c$case_alt_33 = (c$app_arg_9 >= c$app_arg_8) ? {result_6[293:264] + ds_2[31:2]
                                                        ,ds_2[1:0]} : {result_6[293:264] + 30'b000000000000000000000000000001
                                                                      ,2'b00};

  assign c$case_alt_34 = (c$app_arg_9 < c$app_arg_8) ? {result_6[293:264] + ds_2[31:2]
                                                       ,ds_2[1:0]} : {result_6[293:264] + 30'b000000000000000000000000000001
                                                                     ,2'b00};

  assign c$case_alt_35 = (rs1Val != rs2Val) ? {result_6[293:264] + ds_2[31:2]
                                              ,ds_2[1:0]} : {result_6[293:264] + 30'b000000000000000000000000000001
                                                            ,2'b00};

  assign c$case_alt_36 = (rs1Val == rs2Val) ? {result_6[293:264] + ds_2[31:2]
                                              ,ds_2[1:0]} : {result_6[293:264] + 30'b000000000000000000000000000001
                                                            ,2'b00};

  assign c$app_arg_8 = $signed(rs2Val);

  assign c$app_arg_9 = $signed(rs1Val);

  assign ds_2 = x_4;

  assign x_4 = c$$fResizeBitVector_$csignExtendOut << (64'sd1);

  assign c$$fResizeBitVector_$csignExtendOut = (( c$$fResizeBitVector_$csignExtendOut_app_arg[12-1] ) == (1'b0)) ? ({20'b00000000000000000000,c$$fResizeBitVector_$csignExtendOut_app_arg}) : ({20'b11111111111111111111,c$$fResizeBitVector_$csignExtendOut_app_arg});

  assign c$bv_28 = result_6[263:232];

  assign c$bv_29 = result_6[263:232];

  assign c$bv_30 = result_6[263:232];

  assign c$bv_31 = result_6[263:232];

  always @(*) begin
    case(v1_1)
      7'b1100011 : c$$fResizeBitVector_$csignExtendOut_app_arg = {({({c$$fResizeBitVector_$csignExtendOut_app_arg_0,(c$bv_28[7 : 7])}),(c$bv_29[30 : 25])}),(c$bv_30[11 : 8])};
      default : c$$fResizeBitVector_$csignExtendOut_app_arg = c$bv_31[31 : 20];
    endcase
  end

  assign c$bv_32 = result_6[263:232];

  assign v1_1 = c$bv_32[6 : 0];

  assign c$bv_33 = result_6[263:232];

  assign c$$fResizeBitVector_$csignExtendOut_app_arg_0 = c$bv_33[31 : 31];

  assign c$ds14_app_arg = ipv ? 1'b1 : c$ds14_case_alt;

  assign ipv = result_6[294:294];

  assign c$ds14_case_alt = ~ ds13;

  always @(*) begin
    case(v1_2)
      7'b0110111 : ds13 = 1'b1;
      7'b0010111 : ds13 = 1'b1;
      7'b1101111 : ds13 = 1'b1;
      default : ds13 = result_34;
    endcase
  end

  always @(*) begin
    case(v1_2)
      7'b0110011 : result_24 = result_25;
      7'b0010011 : result_24 = result_25;
      default : result_24 = result_31;
    endcase
  end

  always @(*) begin
    casez (c$ds13_case_scrut_0)
      3'b000 : result_25 = aluArg1 + result_29;
      3'b001 : result_25 = aluArg1 << result_28;
      3'b010 : result_25 = {31'b0000000000000000000000000000000,result_27};
      3'b011 : result_25 = {31'b0000000000000000000000000000000,result_26};
      3'b100 : result_25 = aluArg1 ^ result_29;
      3'b101 : result_25 = c$case_alt_37;
      3'b110 : result_25 = aluArg1 | result_29;
      default : result_25 = aluArg1 & result_29;
    endcase
  end

  assign c$case_alt_37_selection_res = bv;

  always @(*) begin
    casez (c$case_alt_37_selection_res)
      1'b0 : c$case_alt_37 = aluArg1 >> result_28;
      default : c$case_alt_37 = $unsigned((c$b_app_arg >>> result_28));
    endcase
  end

  assign result_26 = b ? 1'b1 : 1'b0;

  assign b = aluArg1 < result_29;

  assign result_27 = b_0 ? 1'b1 : 1'b0;

  assign b_0 = c$b_app_arg < ($signed(result_29));

  assign c$b_app_arg = $signed(aluArg1);

  always @(*) begin
    case(v1_2)
      7'b0110111 : aluArg1 = 32'b00000000000000000000000000000000;
      7'b0010111 : aluArg1 = c$aluArg1_case_alt;
      7'b1101111 : aluArg1 = c$aluArg1_case_alt;
      7'b1100111 : aluArg1 = c$aluArg1_case_alt;
      default : aluArg1 = rs1Val;
    endcase
  end

  assign result_28 = wild_2;

  assign wild_2 = $signed(c$wild_app_arg_2);

  assign c$wild_app_arg_2 = $unsigned(x_5[0+:64]);

  assign x_5 = {59'b00000000000000000000000000000000000000000000000000000000000,(result_29[4 : 0])};

  always @(*) begin
    case(v1_2)
      7'b0110111 : result_29 = c$aluArg2_case_alt_0;
      7'b0010111 : result_29 = c$aluArg2_case_alt_0;
      7'b1101111 : result_29 = 32'b00000000000000000000000000000100;
      7'b1100111 : result_29 = 32'b00000000000000000000000000000100;
      7'b0110011 : result_29 = c$aluArg2_case_alt;
      7'b0100011 : result_29 = c$$fResizeBitVector_$csignExtendOut_0;
      default : result_29 = c$$fResizeBitVector_$csignExtendOut_0;
    endcase
  end

  always @(*) begin
    casez (c$ds13_case_scrut_0)
      3'b000 : c$aluArg2_case_alt = result_30;
      default : c$aluArg2_case_alt = rs2Val;
    endcase
  end

  assign c$bv_34 = result_6[263:232];

  assign c$aluArg2_case_alt_0 = {(c$bv_34[31 : 12]),12'b000000000000};

  always @(*) begin
    case(bv)
      1'b1 : result_30 = -rs2Val;
      default : result_30 = rs2Val;
    endcase
  end

  assign c$bv_35 = result_6[263:232];

  assign bv = c$bv_35[30 : 30];

  assign c$aluArg1_case_alt = {result_6[293:264],2'b00};

  assign c$$fResizeBitVector_$csignExtendOut_0 = (( c$$fResizeBitVector_$csignExtendOut_app_arg_1[12-1] ) == (1'b0)) ? ({20'b00000000000000000000,c$$fResizeBitVector_$csignExtendOut_app_arg_1}) : ({20'b11111111111111111111,c$$fResizeBitVector_$csignExtendOut_app_arg_1});

  assign c$bv_36 = result_6[263:232];

  assign c$bv_37 = result_6[263:232];

  assign c$bv_38 = result_6[263:232];

  always @(*) begin
    case(v1_2)
      7'b0100011 : c$$fResizeBitVector_$csignExtendOut_app_arg_1 = {(c$bv_36[31 : 25]),(c$bv_37[11 : 7])};
      default : c$$fResizeBitVector_$csignExtendOut_app_arg_1 = c$bv_38[31 : 20];
    endcase
  end

  assign result_31 = aluArg1_0 + result_32;

  always @(*) begin
    case(v1_2)
      7'b0110111 : aluArg1_0 = 32'b00000000000000000000000000000000;
      7'b0010111 : aluArg1_0 = c$aluArg1_case_alt_0;
      7'b1101111 : aluArg1_0 = c$aluArg1_case_alt_0;
      7'b1100111 : aluArg1_0 = c$aluArg1_case_alt_0;
      default : aluArg1_0 = rs1Val;
    endcase
  end

  always @(*) begin
    case(v1_2)
      7'b0110111 : result_32 = c$aluArg2_case_alt_1;
      7'b0010111 : result_32 = c$aluArg2_case_alt_1;
      7'b1101111 : result_32 = 32'b00000000000000000000000000000100;
      7'b1100111 : result_32 = 32'b00000000000000000000000000000100;
      7'b0110011 : result_32 = result_33;
      7'b0100011 : result_32 = c$$fResizeBitVector_$csignExtendOut_1;
      default : result_32 = c$$fResizeBitVector_$csignExtendOut_1;
    endcase
  end

  assign c$bv_39 = result_6[263:232];

  assign c$aluArg2_case_alt_1 = {(c$bv_39[31 : 12]),12'b000000000000};

  always @(*) begin
    case(bv_0)
      1'b1 : result_33 = -rs2Val;
      default : result_33 = rs2Val;
    endcase
  end

  assign c$bv_40 = result_6[263:232];

  assign bv_0 = c$bv_40[30 : 30];

  assign c$aluArg1_case_alt_0 = {result_6[293:264],2'b00};

  assign c$$fResizeBitVector_$csignExtendOut_1 = (( c$$fResizeBitVector_$csignExtendOut_app_arg_2[12-1] ) == (1'b0)) ? ({20'b00000000000000000000,c$$fResizeBitVector_$csignExtendOut_app_arg_2}) : ({20'b11111111111111111111,c$$fResizeBitVector_$csignExtendOut_app_arg_2});

  assign c$bv_41 = result_6[263:232];

  assign c$bv_42 = result_6[263:232];

  assign c$bv_43 = result_6[263:232];

  always @(*) begin
    case(v1_2)
      7'b0100011 : c$$fResizeBitVector_$csignExtendOut_app_arg_2 = {(c$bv_41[31 : 25]),(c$bv_42[11 : 7])};
      default : c$$fResizeBitVector_$csignExtendOut_app_arg_2 = c$bv_43[31 : 20];
    endcase
  end

  assign rs2Val = c$case_alt[31:0];

  assign rs1Val = c$case_alt[63:32];

  always @(*) begin
    case(v1_2)
      7'b1100111 : result_34 = func3_1 == 3'b000;
      7'b1100011 : result_34 = c$ds13_case_alt_1;
      7'b0000011 : result_34 = c$ds13_case_alt_0;
      7'b0100011 : result_34 = c$ds13_case_alt;
      default : result_34 = result_35;
    endcase
  end

  always @(*) begin
    casez (c$ds13_case_scrut)
      3'b?00 : c$ds13_case_alt = c$ds13_case_alt_3;
      3'b?01 : c$ds13_case_alt = c$ds13_case_alt_2;
      3'b010 : c$ds13_case_alt = 1'b1;
      default : c$ds13_case_alt = 1'b0;
    endcase
  end

  always @(*) begin
    casez (c$ds13_case_scrut)
      3'b?00 : c$ds13_case_alt_0 = 1'b1;
      3'b?01 : c$ds13_case_alt_0 = 1'b1;
      3'b010 : c$ds13_case_alt_0 = 1'b1;
      default : c$ds13_case_alt_0 = 1'b0;
    endcase
  end

  assign c$ds13_case_alt_1_selection_res = func3_1;

  always @(*) begin
    casez (c$ds13_case_alt_1_selection_res)
      3'b000 : c$ds13_case_alt_1 = 1'b1;
      3'b001 : c$ds13_case_alt_1 = 1'b1;
      3'b100 : c$ds13_case_alt_1 = 1'b1;
      3'b101 : c$ds13_case_alt_1 = 1'b1;
      3'b110 : c$ds13_case_alt_1 = 1'b1;
      3'b111 : c$ds13_case_alt_1 = 1'b1;
      default : c$ds13_case_alt_1 = 1'b0;
    endcase
  end

  assign c$ds13_case_alt_2_selection = {c$ds13_case_scrut[2:2]};

  always @(*) begin
    casez (c$ds13_case_alt_2_selection)
      1'b0 : c$ds13_case_alt_2 = 1'b1;
      default : c$ds13_case_alt_2 = 1'b0;
    endcase
  end

  assign c$ds13_case_alt_3_selection = {c$ds13_case_scrut[2:2]};

  always @(*) begin
    casez (c$ds13_case_alt_3_selection)
      1'b0 : c$ds13_case_alt_3 = 1'b1;
      default : c$ds13_case_alt_3 = 1'b0;
    endcase
  end

  assign c$ds13_case_scrut = func3_1;

  always @(*) begin
    case(v1_2)
      7'b0010011 : result_35 = c$ds13_case_alt_6;
      7'b0110011 : result_35 = c$ds13_case_alt_5;
      7'b0001111 : result_35 = func3_1 == 3'b001;
      7'b1110011 : result_35 = c$ds13_case_alt_4;
      default : result_35 = 1'b0;
    endcase
  end

  assign c$bv_45 = result_6[263:232];

  assign v1_2 = c$bv_45[6 : 0];

  always @(*) begin
    case(func3_1)
      3'b000 : c$ds13_case_alt_4 = result_36;
      default : c$ds13_case_alt_4 = c$ds13_case_alt_7;
    endcase
  end

  always @(*) begin
    casez (c$ds13_case_scrut_0)
      3'b001 : c$ds13_case_alt_5 = c$ds13_case_alt_8;
      3'b010 : c$ds13_case_alt_5 = c$ds13_case_alt_8;
      3'b011 : c$ds13_case_alt_5 = c$ds13_case_alt_8;
      3'b100 : c$ds13_case_alt_5 = c$ds13_case_alt_8;
      3'b110 : c$ds13_case_alt_5 = c$ds13_case_alt_8;
      3'b111 : c$ds13_case_alt_5 = c$ds13_case_alt_8;
      default : c$ds13_case_alt_5 = c$ds13_case_alt_9;
    endcase
  end

  always @(*) begin
    casez (c$ds13_case_scrut_0)
      3'b101 : c$ds13_case_alt_6 = c$ds13_case_alt_9;
      default : c$ds13_case_alt_6 = 1'b1;
    endcase
  end

  assign c$ds13_case_alt_7_selection_res = (func3_1[1 : 0]);

  always @(*) begin
    casez (c$ds13_case_alt_7_selection_res)
      2'b00 : c$ds13_case_alt_7 = 1'b0;
      default : c$ds13_case_alt_7 = 1'b1;
    endcase
  end

  always @(*) begin
    case(ds14)
      12'b000000000000 : result_36 = 1'b1;
      12'b000000000001 : result_36 = 1'b1;
      default : result_36 = ds14 == 12'b001100000010;
    endcase
  end

  assign c$bv_46 = result_6[263:232];

  assign ds14 = c$bv_46[31 : 20];

  assign c$ds13_case_alt_8 = func7 == 7'b0000000;

  always @(*) begin
    case(func7)
      7'b0000000 : c$ds13_case_alt_9 = 1'b1;
      default : c$ds13_case_alt_9 = func7 == 7'b0100000;
    endcase
  end

  assign c$ds13_case_scrut_0 = func3_1;

  assign c$bv_47 = result_6[263:232];

  assign func3_1 = c$bv_47[14 : 12];

  assign c$bv_48 = result_6[263:232];

  assign func7 = c$bv_48[31 : 25];

  assign c$case_alt_38 = coreIn[68:68] ? {1'b1,1'b1} : c$case_alt_39;

  assign c$case_alt_39 = coreIn[69:69] ? {1'b1,1'b0} : {1'b0,1'bx};

  assign c$dontApplyInHDLOut = c$dontApplyInHDLOut_app_arg;

  assign c$dontApplyInHDLOut_app_arg_selection = result_6[295:294];

  assign c$bv_49 = result_6[263:232];

  assign c$dontApplyInHDLOut_app_arg = c$dontApplyInHDLOut_app_arg_selection[1:1] ? (c$bv_49[24 : 20]) : (w[24 : 20]);

  assign c$dontApplyInHDLOut_0 = c$dontApplyInHDLOut_app_arg_0;

  assign c$dontApplyInHDLOut_app_arg_0_selection = result_6[295:294];

  assign c$bv_50 = result_6[263:232];

  assign c$dontApplyInHDLOut_app_arg_0 = c$dontApplyInHDLOut_app_arg_0_selection[1:1] ? (c$bv_50[19 : 15]) : (w[19 : 15]);

  assign w = coreIn[101:70];

  assign _clash_internal = result_7[706:559];

  assign iBusWishbone_0 = _clash_internal[147:74];

  assign dBusWishbone_0 = _clash_internal[73:0];

  assign iBusWishbone_ADR = iBusWishbone_0[73:44];

  assign iBusWishbone_DAT_MOSI = iBusWishbone_0[43:12];

  assign iBusWishbone_SEL = iBusWishbone_0[11:8];

  assign iBusWishbone_CYC = iBusWishbone_0[7:7];

  assign iBusWishbone_STB = iBusWishbone_0[6:6];

  assign iBusWishbone_WE = iBusWishbone_0[5:5];

  assign iBusWishbone_CTI = iBusWishbone_0[4:2];

  assign iBusWishbone_BTE = iBusWishbone_0[1:0];

  assign dBusWishbone_ADR = dBusWishbone_0[73:44];

  assign dBusWishbone_DAT_MOSI = dBusWishbone_0[43:12];

  assign dBusWishbone_SEL = dBusWishbone_0[11:8];

  assign dBusWishbone_CYC = dBusWishbone_0[7:7];

  assign dBusWishbone_STB = dBusWishbone_0[6:6];

  assign dBusWishbone_WE = dBusWishbone_0[5:5];

  assign dBusWishbone_CTI = dBusWishbone_0[4:2];

  assign dBusWishbone_BTE = dBusWishbone_0[1:0];


endmodule

